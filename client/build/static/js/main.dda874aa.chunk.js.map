{"version":3,"sources":["Spotify-Logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentSong","setCurrentSong","currentArtist","setCurrentArtist","getCurrentlyPlaying","a","fetch","response","console","log","status","json","responseInJson","item","name","artists","useEffect","cookies","document","cookie","split","c","length","d","window","location","hostname","cookieBase","encodeURIComponent","join","p","pathname","pop","shift","className","src","logo","alt","href","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mOAAe,MAA0B,yC,MCuE1BA,MAnEf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,KAIPC,EAAmB,uCAAG,8BAAAC,EAAA,sEACHC,MACrB,mDAFwB,UACpBC,EADoB,OAK1BC,QAAQC,IAAIF,GACY,MAApBA,EAASG,OANa,gBAOxBT,EAAe,yBAPS,0BAQK,MAApBM,EAASG,OARM,iBASxBT,EAAe,kCATS,2BAUK,MAApBM,EAASG,OAVM,kCAWKH,EAASI,OAXd,QAWlBC,EAXkB,OAYxBJ,QAAQC,IAAIG,GACZX,EAAeW,EAAeC,KAAKC,MACnCX,EAAiBS,EAAeC,KAAKE,QAAQ,GAAGD,MAdxB,4CAAH,qDAyCzB,OAvBAE,qBAAU,YACR,WAEE,IADA,IAAIC,EAAUC,SAASC,OAAOC,MAAM,MAC3BC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAElC,IADA,IAAIE,EAAIC,OAAOC,SAASC,SAASN,MAAM,KAChCG,EAAED,OAAS,GAAG,CACnB,IAAIK,EACFC,mBAAmBX,EAAQI,GAAGD,MAAM,KAAK,GAAGA,MAAM,KAAK,IACvD,oDACAG,EAAEM,KAAK,KACP,UACEC,EAAIN,OAAOC,SAASM,SAASX,MAAM,KAEvC,IADAF,SAASC,OAASQ,EAAa,IACxBG,EAAER,OAAS,GAChBJ,SAASC,OAASQ,EAAaG,EAAED,KAAK,KACtCC,EAAEE,MAEJT,EAAEU,SAhBR,KAoBC,IAGD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,mBAAGC,KAAK,2CAAR,mBAEA,gCACE,wBAAQC,QAASnC,EAAjB,+BACiB,KAAhBJ,EACC,2CAEA,gCACE,4DAA+BE,KAC/B,4BAAIF,gBClDHwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BZ,M","file":"static/js/main.dda874aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Spotify-Logo.2c7ee246.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from \"./Spotify-Logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [currentSong, setCurrentSong] = useState(\"\");\n  const [currentArtist, setCurrentArtist] = useState(\"\");\n\n  const getCurrentlyPlaying = async () => {\n    const response = await fetch(\n      \"http://localhost:5000/spotify/functions/playing\"\n    );\n\n    console.log(response);\n    if (response.status === 401) {\n      setCurrentSong(\"You are not logged in\");\n    } else if (response.status === 204) {\n      setCurrentSong(\"Currently not playing any song\");\n    } else if (response.status === 200) {\n      const responseInJson = await response.json();\n      console.log(responseInJson);\n      setCurrentSong(responseInJson.item.name);\n      setCurrentArtist(responseInJson.item.artists[0].name);\n    }\n  };\n\n  useEffect(() => {\n    (function () {\n      var cookies = document.cookie.split(\"; \");\n      for (var c = 0; c < cookies.length; c++) {\n        var d = window.location.hostname.split(\".\");\n        while (d.length > 0) {\n          var cookieBase =\n            encodeURIComponent(cookies[c].split(\";\")[0].split(\"=\")[0]) +\n            \"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=\" +\n            d.join(\".\") +\n            \" ;path=\";\n          var p = window.location.pathname.split(\"/\");\n          document.cookie = cookieBase + \"/\";\n          while (p.length > 0) {\n            document.cookie = cookieBase + p.join(\"/\");\n            p.pop();\n          }\n          d.shift();\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a href=\"http://localhost:5000/spotify/auth/login\">login</a>\n\n        <div>\n          <button onClick={getCurrentlyPlaying}>Currently playing</button>\n          {currentSong === \"\" || undefined ? (\n            <p>moment pls</p>\n          ) : (\n            <div>\n              <h4>Currently playing artist: {currentArtist}</h4>\n              <p>{currentSong}</p>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}